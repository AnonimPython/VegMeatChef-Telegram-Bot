import os
import json
from dotenv import load_dotenv
import telebot
from telebot import types

load_dotenv()
bot = telebot.TeleBot(os.getenv('TELEGRAM_BOT_TOKEN'))

def init_recipes():
    default = {
        "vegan": {
            "–ü—Ä–∏–º–µ—Ä –≤–µ–≥–∞–Ω—Å–∫–æ–≥–æ": "–†–µ—Ü–µ–ø—Ç –∑–¥–µ—Å—å...",
            "–î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç": "–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è..."
        },
        "non_vegan": {
            "–ü—Ä–∏–º–µ—Ä –Ω–µ–≤–µ–≥–∞–Ω—Å–∫–æ–≥–æ": "–†–µ—Ü–µ–ø—Ç –∑–¥–µ—Å—å...",
            "–ú—è—Å–Ω–æ–µ –±–ª—é–¥–æ": "–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è..."
        }
    }
    
    if not os.path.exists('recipes.json'):
        with open('recipes.json', 'w', encoding='utf-8') as f:
            json.dump(default, f, ensure_ascii=False, indent=4)
        return default
    else:
        try:
            with open('recipes.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return default

def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üçè –í–µ–≥–∞–Ω', 'üçó –ù–µ –≤–µ–≥–∞–Ω')
    markup.row('‚ùì –ü–æ–º–æ—â—å')
    return markup

def recipes_menu(is_vegan):
    recipes = init_recipes()
    category = 'vegan' if is_vegan else 'non_vegan'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for recipe in recipes[category]:
        markup.row(recipe)
    markup.row('üîô –ù–∞–∑–∞–¥')
    return markup

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üë®üç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—à–µ—Ñ. –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤:",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda m: m.text in ['üçè –í–µ–≥–∞–Ω', 'üçó –ù–µ –≤–µ–≥–∞–Ω'])
def show_recipes(message):
    is_vegan = message.text == 'üçè –í–µ–≥–∞–Ω'
    recipes = init_recipes()
    category = 'vegan' if is_vegan else 'non_vegan'
    
    if not recipes[category]:
        bot.send_message(message.chat.id, "üò¢ –†–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
    else:
        bot.send_message(
            message.chat.id,
            f"–í–æ—Ç {'–≤–µ–≥–∞–Ω—Å–∫–∏–µ' if is_vegan else '–Ω–µ–≤–µ–≥–∞–Ω—Å–∫–∏–µ'} —Ä–µ—Ü–µ–ø—Ç—ã:",
            reply_markup=recipes_menu(is_vegan)
        )

@bot.message_handler(func=lambda m: m.text in init_recipes()['vegan'] | init_recipes()['non_vegan'])
def show_recipe(message):
    recipes = init_recipes()
    for category in ['vegan', 'non_vegan']:
        if message.text in recipes[category]:
            bot.send_message(
                message.chat.id,
                f"üç≥ {message.text}:\n\n{recipes[category][message.text]}",
                reply_markup=recipes_menu(category == 'vegan')
            )

@bot.message_handler(func=lambda m: m.text == 'üîô –ù–∞–∑–∞–¥')
def back(message):
    send_welcome(message)

@bot.message_handler(func=lambda m: m.text == '‚ùì –ü–æ–º–æ—â—å')
def help(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–ª—É—á–∏ —Ä–µ—Ü–µ–ø—Ç!\n\n" 
        "–ï—Å–ª–∏ —Ñ–∞–π–ª recipes.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        reply_markup=main_menu()
    )

if __name__ == '__main__':
    init_recipes()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()